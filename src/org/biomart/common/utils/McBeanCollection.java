package org.biomart.common.utils;

import java.beans.PropertyChangeEvent;
import java.util.Collection;
import java.util.Iterator;

/**
 * This class wraps an existing collection, and causes
 * {@link PropertyChangeEvent} events to be fired whenever it changes.
 * <p>
 * Adding objects to the collection will result in events where the before value
 * is null and the after value is the value being added.
 * <p>
 * Removing them will result in events where the before value is they value
 * being removed and the after value is null.
 * <p>
 * Multiple add/remove events will have both before and after values of null.
 * <p>
 * All events will have a property of {@link BeanCollection#propertyName}.
 * 
 */
public class McBeanCollection<E> extends WeakPropertyChangeSupport implements Collection<E> {

	/**
	 * This field is for use by subclasses which need to access the delegate
	 * directly.
	 */
	protected final Collection<E> delegate;

	/**
	 * The property key used in events generated by this map.
	 */
	public static final String property_AddItem = "Collection_AddItem";
	public static final String property_RemoveItem = "Collection_RemoveItem";
	//check if needed
	public static final String property_AddAll = "Collection_AddAll";
	public static final String property_RemoveAll = "Collection_RemoveAll";

	public McBeanCollection(Collection<E> delegate) {
		super(delegate);
		this.delegate = delegate;
	}

	public boolean add(E o) {
		final boolean result = this.delegate.add(o);
		if (result)
			this.firePropertyChange(McBeanCollection.property_AddItem, null, o);
		return result;
	}

	public boolean addAll(Collection<? extends E> c) {
		final boolean result = this.delegate.addAll(c);
		if (result)
			this.firePropertyChange(McBeanCollection.property_AddAll, null, null);
		return result;
	}

	public void clear() {
		this.delegate.clear();
		this.firePropertyChange(McBeanCollection.property_RemoveAll, null, null);
	}

	public boolean contains(Object o) {
		return this.delegate.contains(o);
	}

	public boolean containsAll(Collection<?> c) {
		return this.delegate.containsAll(c);
	}

	public boolean isEmpty() {
		return this.delegate.isEmpty();
	}

	public Iterator<E> iterator() {
		return this.delegate.iterator();
	}

	public boolean remove(Object o) {
		final boolean result = this.delegate.remove(o);
		if (result)
			this.firePropertyChange(McBeanCollection.property_RemoveItem, o, null);
		return result;
	}

	public boolean removeAll(Collection<?> c) {
		final boolean result = this.delegate.removeAll(c);
		if (result)
			this.firePropertyChange(McBeanCollection.property_RemoveAll, null, null);
		return result;
	}

	public boolean retainAll(Collection<?> c) {
		return this.delegate.retainAll(c);
	}

	public int size() {
		return this.delegate.size();
	}

	public Object[] toArray() {
		return this.delegate.toArray();
	}

	public <T> T[] toArray(T[] a) {
		return this.delegate.toArray(a);
	}
	
}