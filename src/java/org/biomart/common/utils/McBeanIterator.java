package org.biomart.common.utils;

import java.beans.PropertyChangeEvent;
import java.util.Iterator;
/**
 * This class wraps an existing iterator, and causes {@link PropertyChangeEvent}
 * events to be fired whenever it changes.
 * <p>
 * Removing values will result in events where the before value is they value
 * being removed and the after value is null.
 * <p>
 * All events will have a property of {@link BeanIterator#propertyName}.
 */
public class McBeanIterator<E> extends WeakPropertyChangeSupport implements Iterator<E> {
	/**
	 * This field is intended for use by subclasses so that they can access the
	 * delegate directly.
	 */
	protected final Iterator<E> delegate;
	/**
	 * This is intended for use by subclasses that can move in both directions.
	 */
	protected E currentObj;
	/**
	 * The property key used in events generated by this map.
	 */
	public static final String property_Remove = "Iterator_Remove";
	public static final String property_Add = "Iterator_Add";
	
	public McBeanIterator(Iterator<E> delegate) {
		super(delegate);
		this.delegate = delegate;
	}

	public boolean hasNext() {
		return this.delegate.hasNext();
	}

	public E next() {
		this.currentObj = this.delegate.next();
		return this.currentObj;
	}

	public void remove() {
		this.delegate.remove();
		this.firePropertyChange(McBeanIterator.property_Remove, this.currentObj,null);
	}
	
}