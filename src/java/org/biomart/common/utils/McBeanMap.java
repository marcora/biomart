package org.biomart.common.utils;

import java.util.Collection;
import java.util.Map;
import java.util.Set;

/**
 * This class wraps an existing map, and causes {@link PropertyChangeEvent}
 * events to be fired whenever it changes.
 * <p>
 * Adding objects to the map will result in events where the before value is
 * null and the after value is the key being added.
 * <p>
 * Removing them will result in events where the before value is they key being
 * removed and the after value is null.
 * <p>
 * Multiple add/remove events will have both before and after values of null.
 * <p>
 * All events will have a property of {@link McBeanMap#propertyName}.
 * 
 */

public class McBeanMap<K,V> extends WeakPropertyChangeSupport implements Map<K,V> {

	private final Map<K,V> delegate;
	/**
	 * The property key used in events generated by this map.
	 */
	public static final String property_AddItem = "Map_AddItem";
	public static final String property_RemoveItem = "Map_RemoveItem";
	public static final String property_AddAll = "Map_AddAll";
	public static final String property_RemoveAll = "Map_RemoveAll";

	public McBeanMap(Map<K,V> delegate) {
		super(delegate);
		this.delegate = delegate;
	}
	
	public void clear() {
		this.delegate.clear();
		this.firePropertyChange(McBeanMap.property_RemoveAll, null, null);
	}

	public boolean containsKey(Object key) {
		return this.delegate.containsKey(key);
	}

	public boolean containsValue(Object value) {
		return this.delegate.containsValue(value);
	}

	public Set<Map.Entry<K, V>> entrySet() {
		return this.delegate.entrySet();		
	}

	public V get(Object key) {
		return this.delegate.get(key);
	}

	public boolean isEmpty() {
		return this.delegate.isEmpty();
	}

	public Set<K> keySet() {
		return this.delegate.keySet();
	}

	public V put(K key, V value) {
		final boolean already = this.delegate.containsKey(key);
		final V result = this.delegate.put(key, value);
		this.firePropertyChange(McBeanMap.property_AddItem, already ? key:null,value);
		return result;
	}

	public void putAll(Map<? extends K, ? extends V> t) {
		this.delegate.putAll(t);
		this.firePropertyChange(McBeanMap.property_AddAll, null, null);
	}

	public V remove(Object key) {
		final V result = this.delegate.remove(key);
		this.firePropertyChange(McBeanMap.property_RemoveItem, key, null);
		return result;
	}

	public int size() {
		return this.delegate.size();
	}

	public Collection<V> values() {
		return this.delegate.values();
	}
	

}